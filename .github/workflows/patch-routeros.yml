name: Patch RouterOS v{{ env.LATEST_VERSION }}

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  MIKRO_NPK_SIGN_PUBLIC_KEY: C293CED638A2A33C681FC8DE98EE26C54EADC5390C2DFCE197D35C83C416CF59
  MIKRO_LICENSE_PUBLIC_KEY: 8E1067E4305FCDC0CFBF95C10F96E5DFE8C49AEF486BD1A4E2E96C27F01E3E32
  CUSTOM_NPK_SIGN_PRIVATE_KEY: 7D008D9B80B036FB0205601FEE79D550927EBCA937B7008CC877281F2F8AC640
  CUSTOM_NPK_SIGN_PUBLIC_KEY: 28F886E32C141123126CFBCAD56766E99D1720CEB1F12BE2468BEBE7662FBEDB
  CUSTOM_LICENSE_PRIVATE_KEY: 9DBC845E9018537810FDAE62824322EEE1B12BAD81FCA28EC295FB397C61CE0B
  CUSTOM_LICENSE_PUBLIC_KEY: 723A34A6E3300F23E4BAA06156B9327514AEC170732655F16E04C17928DD770F

jobs:
  patch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86, arm, arm64, mipsbe, mmips, smips, ppc]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mkisofs xorriso qemu-utils extlinux --no-install-recommends
        sudo pip install -r requirements.txt

    - name: Check for latest version
      id: get_latest
      run: |
        echo $(uname -a)
        NEWEST=$(curl -s https://upgrade.mikrotik.com/routeros/NEWESTa7.stable)
        LATEST_VERSION=$(echo "$NEWEST" | cut -d' ' -f1)
        BUILD_TIME=$(echo "$NEWEST" | cut -d' ' -f2)
        echo Latest Version: $LATEST_VERSION
        echo Build Time: $BUILD_TIME
        _LATEST_VERSION=$(cat latest7.txt | cut -d ' ' -f1)
        if [ "$_LATEST_VERSION" == "$LATEST_VERSION" ]; then
          echo "No new version found"
          echo "has_new_version=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        echo "has_new_version=true" >> $GITHUB_OUTPUT
        curl -s -o CHANGELOG https://upgrade.mikrotik.com/routeros/$LATEST_VERSION/CHANGELOG
        cat CHANGELOG
        echo "NEWEST=${NEWEST}" >> $GITHUB_ENV
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
        if [ "${{ matrix.arch }}" == "x86" ]; then
          ARCH=''
        elif [ "${{ matrix.arch }}" == "arm" ]; then
          ARCH='-arm'
        elif [ "${{ matrix.arch }}" == "arm64" ]; then
          ARCH='-arm64'
        elif [ "${{ matrix.arch }}" == "mipsbe" ]; then
          ARCH='-mipsbe'
        elif [ "${{ matrix.arch }}" == "mmips" ]; then
          ARCH='-mmips'
        elif [ "${{ matrix.arch }}" == "smips" ]; then
          ARCH='-smips'
        elif [ "${{ matrix.arch }}" == "ppc" ]; then
          ARCH='-ppc'
        fi
        echo "ARCH=$ARCH" >> $GITHUB_ENV

    - name: Cache mikrotik-${{ env.LATEST_VERSION }}${{ env.ARCH }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true' && (matrix.arch == 'x86' || matrix.arch == 'arm64')
      id: cache_mikrotik
      uses: actions/cache@v4
      with:
        path: mikrotik.iso
        key: mikrotik-${{ env.LATEST_VERSION }}-${{ matrix.arch }}

    - name: Get mikrotik-${{ env.LATEST_VERSION }}${{ env.ARCH }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache_mikrotik.outputs.cache-hit != 'true' && (matrix.arch == 'x86' || matrix.arch == 'arm64')
      run: |
        sudo curl -s -o mikrotik.iso https://download.mikrotik.com/routeros/$LATEST_VERSION/mikrotik-$LATEST_VERSION$ARCH.iso

    # Further patching steps...

    - name: Create tag for new release
      if: steps.get_latest.outputs.has_new_version == 'true' && matrix.arch == 'x86'
      run: |
       VERSION=$(cat latest7.txt)  # Or fetch the version from your logic
       TAG_NAME="v$VERSION"  # Define the tag format (e.g., v1.0.0)
       git tag $TAG_NAME  # Create the tag
       git push origin $TAG_NAME  # Push the tag to GitHub

